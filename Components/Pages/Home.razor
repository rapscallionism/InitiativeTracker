@page "/"
@rendermode InteractiveServer

<PageTitle>Initiative Tracker</PageTitle>

<div>
    <h1 class="text-center">Initiative Tracker</h1>
</div>

<div class="container">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Creature</th>
                <th>Initiative Order</th>
                <th>Action</th>
                <th>Bonus Action</th>
                <th>Reaction</th>
                <th>Movement</th>
                <th>Status</th>
                <th>Current Health</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Initiative creature in creaturesInEncounter) {
                <tr>
                @if (creature._isCurrentTurn)
                {
                    <td class="text-dark font-weight-bold">@creature._name</td>
                        <td class="text-dark font-weight-bold">@creature._initiative</td>
                }
                else
                {
                    <td class="text-muted">@creature._name</td>
                    <td class="text-muted">@creature._initiative</td>
                }
                @if (creature._hasAction) { <td class="text-success"><button class="btn btn-primary" @onclick="creature.UseAction">Yes</button></td> } else { 
                    <td class="text-danger"><button class="btn btn-danger" @onclick="creature.ResetAction">No</button></td>
                }
                    
                @if (creature._hasBonusAction) { <td class="text-success"><button class="btn btn-primary" @onclick="creature.UseBonusAction">Yes</button></td> } else { 
                    <td class="text-danger"><button class="btn btn-danger" @onclick="creature.ResetBonusAction">No</button></td>
                }
                    
                @if (creature._hasReaction) { <td class="text-success"><button class="btn btn-primary" @onclick="creature.UseReaction">Yes</button></td> } else { 
                    <td class="text-danger"><button class="btn btn-danger" @onclick="creature.ResetReaction">No</button></td>
                }
                    
                @if (creature._hasMovement) { <td class="text-success"><button class="btn btn-primary" @onclick="creature.UseMovement">Yes</button></td> } else { 
                    <td class="text-danger"><button class="btn btn-danger" @onclick="creature.ResetMovement">No</button></td>
                }
                @if (creature._isDead == 1) { <td  class="text-success"><a id="clickable" @onclick=creature.UpdateDeathStatus>Alive</a></td> } 
                else if (creature._isDead == 0) { <td  class="text-secondary"><a id="clickable" @onclick=creature.UpdateDeathStatus>Unconscious</a></td> }
                else if (creature._isDead == -1) { <td  class="text-danger"><a id="clickable" @onclick=creature.UpdateDeathStatus>Dead</a></td> }

                    @if (!creature._isCurrentlyChangingHealth) { <td id="clickable" class="text-danger" @onclick="() => setCurrentlyChangingHealth(creature)">@creature._currentHealth</td> }
                    else
                    {
                        <td class="text-danger">
                            <div class="ml-0 row">
                                <label for="Health">Current Health:</label>
                                <input id="damageTaken" @bind="_currentHealth" class="form-control w-25" />
                                <button type="submit" @onclick="() => TakeDamage(creature, _currentHealth)" class="btn btn-primary col-3">Submit</button>
                            </div>
                        </td>
                    }
                    
                </tr>
            }
        </tbody>
    </table>


    @if (!_hasEncounterBegan)
    {
        <div class="container">
            <div class="row">
                <div class="col-3">
                    <label for="name">Creature Name:</label>
                    <input id="name" @bind="_nameValue" class="form-control" />
                </div>
                <div class="col-3">
                    <label for="initiative">Initiative Value:</label>
                    <input id="initiative" @bind="_initiativeValue" class="form-control" />
                </div>
                <div class="col-3">
                    <label for="initiative">Current Health:</label>
                    <input id="initiative" @bind="_currentHealth" class="form-control" />
                </div>
                <button @onclick="AddCreatureToInitiative" class="btn sm btn-primary col-2">Add Creature</button>
            </div>
            <div class="row mt-3">
                <button @onclick="OnBeginInitiative" class="btn btn-success begin-initiative-button col-2">Begin Initiative</button>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="row justify-content-sm-between">
                <div class="col-4">
                    <button @onclick="OnEndInitiative" class="btn btn-danger begin-initiative-button">End Initiative</button>
                </div>
                <div class="col-4">
                    <button @onclick="() => _addingCreatureToMiddleOfInitiative = !_addingCreatureToMiddleOfInitiative" class="btn btn-warning begin-initiative-button">Add To Initiative</button>
                </div>
                <div class="col-4">
                    <button @onclick="NextTurn" class="btn btn-info begin-initiative-button">End Turn</button>
                </div>
            </div>
            @if (_addingCreatureToMiddleOfInitiative)
            {
                <div class="row">
                    <div class="col-3">
                        <label for="name">Creature Name:</label>
                        <input id="name" @bind="_nameValue" class="form-control" />
                    </div>
                    <div class="col-3">
                        <label for="initiative">Initiative Value:</label>
                        <input id="initiative" @bind="_initiativeValue" class="form-control" />
                    </div>
                    <div class="col-3">
                        <label for="initiative">Current Health:</label>
                        <input id="initiative" @bind="_currentHealth" class="form-control" />
                    </div>
                    <button @onclick="AddCreatureToInitiative" class="btn btn-primary col-2">Add Creature</button>
                </div>
            }
        </div>
    }
</div>




<div class="container pt-5">
    @if (_hasEncounterEnded)
    {
        <div>@_totalNumberOfRoundsOfCombat round(s) of combat elapsed.</div>

        @foreach (Initiative creature in creaturesInEncounter)
        {
            <div>@($"{creature._name} took a total of {creature._damageTaken} points of damage and healed a total of {creature._damageHealed} points of damage.")</div>
        }
    }
</div>


@code {

    public string _nameValue = "";

    public int _initiativeValue = 0;

    public bool _hasEncounterBegan = false;

    public int _currentTurnIndex = -1;

    public bool _isChangingHealth = false;

    public int _currentHealth = 0;

    public bool _hasEncounterEnded = false;

    public int _totalNumberOfRoundsOfCombat = 0;

    public List<Initiative> creaturesInEncounter = new List<Initiative>{
    };

    public List<Initiative> deadCreatures = new List<Initiative>();

    public bool _addingCreatureToMiddleOfInitiative = false;

    protected override void OnInitialized()
    {
        // TODO: REMOVE THIS ONCE DONE WITH TESTING
        creaturesInEncounter = AddTestCreatures();
    }

    public List<Initiative> AddTestCreatures()
    {
        Initiative Netari = new Initiative("Netari", 19, 37);
        Initiative Vahgon = new Initiative("Vahgon", 21, 35);
        Initiative Bart = new Initiative("Bart", 13, 27);
        Initiative Tempo = new Initiative("Tempo", 20, 31);
        List<Initiative> creaturesToAdd = new List<Initiative>();
        creaturesToAdd.Add(Netari);
        creaturesToAdd.Add(Vahgon);
        creaturesToAdd.Add(Bart);
        creaturesToAdd.Add(Tempo);
        return creaturesToAdd;
    }

    public void NextTurn()
    {
        // Set the current creature's turn to false
        creaturesInEncounter[_currentTurnIndex]._isCurrentTurn = false;
        creaturesInEncounter[_currentTurnIndex].Reset();

        // To Stop Out of Bounds Exceptions
        try
        {
            _currentTurnIndex += 1;
            creaturesInEncounter[_currentTurnIndex]._isCurrentTurn = true;
        } catch (ArgumentOutOfRangeException)
        {
            _totalNumberOfRoundsOfCombat += 1;
            _currentTurnIndex = 0;
            creaturesInEncounter[_currentTurnIndex]._isCurrentTurn = true;
        }

        // Set the next creature's turn to false

    }

    public void AddCreatureToInitiative() {
        // Ensure that Name Value and current health are empty or 0
        if (_nameValue == "" || _currentHealth == 0)
        {
            return;
        }

        // Grab the name value and the initiative values 
        Initiative newInitiative = new Initiative(_nameValue, _initiativeValue, _currentHealth);

        // Add it to the initiative
        creaturesInEncounter.Add(newInitiative);
        // Reset the name value and initiative value
        _nameValue = "";
        _initiativeValue = 0;
        _currentHealth = 0;
    }

    public void OnEndInitiative()
    {
        // Loop through the creatures in the encounter and spit out the damage that they took
        _hasEncounterBegan = !_hasEncounterBegan;
        _hasEncounterEnded = true;
    }

    public void OnBeginInitiative() {
        _hasEncounterBegan = !_hasEncounterBegan;

        creaturesInEncounter = SortInitiative(creaturesInEncounter);

        creaturesInEncounter[0]._isCurrentTurn = true;
        _currentTurnIndex = 0;
    }

    public void TakeDamage(Initiative creature, int newHealth)
    {
        // Check if the creature took damage or was healed
        if (newHealth > creature._currentHealth)
        {
            int damageAlreadyHealed = creature._damageHealed;
            int newDamageHealed = newHealth - creature._currentHealth;
            creature._damageHealed = damageAlreadyHealed + newDamageHealed;
        } else if (newHealth < creature._currentHealth)
        {
            // Calculate the amount of damage taken; compare the current health vs. the input of the damage taken
            int damageAlreadyTaken = creature._damageTaken;
            int newDamageTaken = creature._currentHealth - newHealth;

            // Update the names and damage taken as a part of the dictionary
            creature._damageTaken = damageAlreadyTaken + newDamageTaken;
        }

        // When the user clicks the field, it should turn it into an input field with a button beside it; tie the
        // input field value to the new damage taken
        creature._currentHealth = newHealth;
        creature._isCurrentlyChangingHealth = !creature._isCurrentlyChangingHealth;

        // Set the current health back down to 0 so it can set it for said creature and set the global variable back to false
        _currentHealth = 0;
        _isChangingHealth = false;
    }


    public List<Initiative> SortInitiative(List<Initiative> creaturesInInitiative)
    {
        // Create a copy of it
        List<Initiative> sortedInitiative = creaturesInInitiative.ToList();

        // Sort it 
        sortedInitiative.Sort((firstObject, secondObject) => secondObject._initiative.CompareTo(firstObject._initiative));

        // Return it 
        sortedInitiative.ForEach((creature) => creature.Reset());

        return sortedInitiative;
    }

    public void setCurrentlyChangingHealth(Initiative creature)
    {
        // If we're already changing the health of one creature, make it so that nothing happens if we happen to click on any other ones
        if (_isChangingHealth) { return; }

        // Set the current health global value to the creature's current health
        _currentHealth = creature._currentHealth;

        // Make sure to set the boolean to its opposite now so it can display the input
        creature._isCurrentlyChangingHealth = !creature._isCurrentlyChangingHealth;

        // Change the global setting health check
        _isChangingHealth = true;
    }

    public class Initiative
    {
        public string _name = "";
        public int _initiative = 0;
        public bool _isCurrentTurn = false;
        public bool _hasMovement = true;
        public bool _hasBonusAction = true;
        public bool _hasAction = true;
        public bool _hasReaction = true;
        /// <summary>
        ///     1 = Alive
        ///     0 = Unconscious
        ///     -1 = Dead
        /// </summary>
        public int _isDead = 1;
        public int _currentHealth = 0;
        public bool _isCurrentlyChangingHealth = false;
        public int _damageTaken = 0;
        public int _damageHealed = 0;

        public Initiative() { }

        public Initiative(string name, int initiative, int currentHealth)
        {
            _name = name;
            _initiative = initiative;
            _currentHealth = currentHealth;
        }

        public void Reset()
        {
            _hasMovement = true;
            _hasBonusAction = true;
            _hasAction = true;
            _hasReaction = true;
        }

        public void UseMovement()
        {
            this._hasMovement = false;
        }

        public void UseAction()
        {
            this._hasAction = false;
        }

        public void UseBonusAction()
        {
            this._hasBonusAction = false;
        }

        public void UseReaction()
        {
            this._hasReaction = false;
        }

        public void ResetMovement()
        {
            this._hasMovement = true;
        }

        public void ResetAction()
        {
            this._hasAction = true;
        }

        public void ResetBonusAction()
        {
            this._hasBonusAction = true;
        }

        public void ResetReaction()
        {
            this._hasReaction = true;
        }

        public void UpdateDeathStatus()
        {
            if (this._isDead == -1)
            {
                this._isDead = 1;
            } else
            {
                this._isDead -= 1;
            }
        }

    }

}